# 🖥️ Speech Enhancement S-MoE Project Requirements - Python 3.13 (CPU Only - FIXED)
# Optimized for Mac and Windows CPU training with Python 3.13

# =====================================
# IMPORTANT: PYTORCH INSTALLATION
# =====================================
# Install PyTorch CPU version FIRST with this command:
# pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
#
# Then install the rest of the requirements with:
# pip install -r requirements_cpu.txt

# =====================================
# CORE DEEP LEARNING FRAMEWORKS (CPU OPTIMIZED)
# =====================================
# NOTE: Install these manually with CPU index URL (see instructions above)
# torch>=2.1.0
# torchaudio>=2.1.0
# torchvision>=0.16.0

# =====================================
# AUDIO PROCESSING & SIGNAL PROCESSING
# =====================================
librosa>=0.10.1
soundfile>=0.12.1
scipy>=1.11.0
resampy>=0.4.2
numba>=0.58.0              # Critical for librosa with Python 3.13

# Alternative audio processing (lightweight)
pydub>=0.25.1

# =====================================
# DATA SCIENCE & NUMERICAL COMPUTING (CPU OPTIMIZED)
# =====================================
numpy>=1.24.0,<2.2.2       # Pin below 2.0, optimized for CPU
pandas>=2.1.0
scikit-learn>=1.3.0

# CPU performance optimization
threadpoolctl>=3.2.0        # Control threading for CPU
joblib>=1.3.0               # Parallel processing

# =====================================
# CONFIGURATION & SERIALIZATION
# =====================================
pyyaml>=6.0.1
typing-extensions>=4.8.0

# =====================================
# TRAINING & MONITORING (CPU FRIENDLY)
# =====================================
tensorboard>=2.15.0         # Primary monitoring tool
tqdm>=4.66.0                # Progress bars
wandb>=0.16.0               # Optional - can comment out if not needed

# =====================================
# LOGGING & UTILITIES
# =====================================
colorlog>=6.8.0
colorama>=0.4.6             # Cross-platform color support (Win/Mac)
rich>=13.7.0                # Beautiful terminal output

# =====================================
# SYSTEM & PERFORMANCE MONITORING
# =====================================
psutil>=5.9.6               # CPU and memory monitoring

# =====================================
# VISUALIZATION & PLOTTING
# =====================================
matplotlib>=3.8.0
seaborn>=0.13.0
plotly>=5.17.0              # Interactive plots

# =====================================
# TESTING & DEVELOPMENT
# =====================================
pytest>=7.4.0
pytest-cov>=4.1.0
black>=23.11.0              # Code formatting
flake8>=6.1.0               # Linting
mypy>=1.7.0                 # Type checking

# =====================================
# OPTIONAL: ADVANCED FEATURES (CPU COMPATIBLE)
# =====================================
# Uncomment these if needed:

# For model optimization (CPU)
# onnx>=1.15.0
# onnxruntime>=1.16.0

# For hyperparameter optimization
# optuna>=3.4.0
# hyperopt>=0.2.7

# =====================================
# INSTALLATION INSTRUCTIONS - STEP BY STEP
# =====================================
#
# FIXED INSTALLATION PROCESS:
#
# 1. Create and activate virtual environment:
#
#    Mac/Linux:
#    python3.13 -m venv speech_enhancement_cpu
#    source speech_enhancement_cpu/bin/activate
#
#    Windows:
#    python -m venv speech_enhancement_cpu
#    speech_enhancement_cpu\Scripts\activate
#
# 2. Upgrade package tools:
#    python -m pip install --upgrade pip setuptools wheel
#
# 3. Install PyTorch CPU version FIRST (REQUIRED):
#    pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
#
# 4. Verify PyTorch CPU installation:
#    python -c "import torch; print(f'PyTorch version: {torch.__version__}'); print(f'CUDA available: {torch.cuda.is_available()}'); print(f'MPS available: {torch.backends.mps.is_available()}')"
#    # Should show: CUDA available: False, MPS available: False
#
# 5. Install remaining requirements:
#    pip install -r requirements_cpu.txt
#
# 6. Test complete installation:
#    python -c "import torch, librosa, numpy, pandas; print('✅ All packages work!')"

# =====================================
# ALTERNATIVE INSTALLATION METHODS
# =====================================
#
# Method 1: One-by-one installation
# pip install torch --index-url https://download.pytorch.org/whl/cpu
# pip install torchaudio --index-url https://download.pytorch.org/whl/cpu
# pip install "numpy>=1.24.0,<2.0.0"
# pip install librosa>=0.10.1
# pip install -r requirements_cpu.txt
#
# Method 2: Using conda (if pip fails)
# conda create -n speech_enhancement python=3.13
# conda activate speech_enhancement
# conda install pytorch torchvision torchaudio cpuonly -c pytorch
# pip install -r requirements_cpu.txt
#
# Method 3: Manual verification of each package
# pip install torch --index-url https://download.pytorch.org/whl/cpu
# python -c "import torch; print('✅ PyTorch OK')"
# pip install librosa
# python -c "import librosa; print('✅ Librosa OK')"
# # Continue for each package...

# =====================================
# SYSTEM-SPECIFIC DEPENDENCIES
# =====================================
#
# macOS:
# brew install ffmpeg libsndfile portaudio
# # If you don't have Homebrew:
# /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#
# Windows:
# 1. Install Microsoft C++ Build Tools from:
#    https://visualstudio.microsoft.com/visual-cpp-build-tools/
# 2. Download and install FFmpeg:
#    https://ffmpeg.org/download.html
# 3. Add FFmpeg to your system PATH
#
# Alternative for Windows (easier):
# conda install -c conda-forge ffmpeg libsndfile
#
# Ubuntu/WSL:
# sudo apt-get update
# sudo apt-get install ffmpeg libsndfile1 python3.13-dev build-essential

# =====================================
# TROUBLESHOOTING COMMON ISSUES
# =====================================
#
# Issue 1: "torch>=2.1.0+cpu" error
# Solution: Install PyTorch separately with CPU index URL (see step 3 above)
#
# Issue 2: librosa installation fails
# Solution: Install numba first: pip install numba>=0.58.0
#
# Issue 3: soundfile issues on Windows
# Solution: Install Visual C++ Build Tools, then retry
#
# Issue 4: "No module named torch"
# Solution: Make sure you installed PyTorch first with the CPU index URL
#
# Issue 5: numpy compatibility issues
# Solution: Install specific numpy version first: pip install "numpy>=1.24.0,<2.0.0"
#
# Issue 6: Permission errors on Windows
# Solution: Run command prompt as Administrator
#
# Issue 7: Python 3.13 not available
# Solution: Download from python.org or use pyenv/conda

# =====================================
# TESTING YOUR INSTALLATION
# =====================================
#
# Quick test script - save as test_install.py:
#
# import sys
# print(f"Python version: {sys.version}")
#
# packages_to_test = [
#     "torch", "torchaudio", "librosa", "numpy",
#     "pandas", "yaml", "matplotlib", "tqdm"
# ]
#
# for package in packages_to_test:
#     try:
#         __import__(package)
#         print(f"✅ {package}")
#     except ImportError as e:
#         print(f"❌ {package}: {e}")
#
# # Test PyTorch CPU-only
# import torch
# print(f"\nPyTorch version: {torch.__version__}")
# print(f"CUDA available: {torch.cuda.is_available()}")
# print(f"MPS available: {torch.backends.mps.is_available()}")
# print(f"Number of CPU threads: {torch.get_num_threads()}")
#
# # Test tensor operations
# x = torch.randn(100, 100)
# y = torch.matmul(x, x.T)
# print(f"✅ PyTorch operations work: {y.shape}")
#
# Run with: python test_install.py

# =====================================
# CPU OPTIMIZATION SETTINGS
# =====================================
#
# Add these to your training script or shell profile:
#
# Mac/Linux (.bashrc or .zshrc):
# export MKL_NUM_THREADS=4
# export OMP_NUM_THREADS=4
# export OPENBLAS_NUM_THREADS=4
#
# Windows (PowerShell profile or before running):
# $env:MKL_NUM_THREADS="4"
# $env:OMP_NUM_THREADS="4"
# $env:OPENBLAS_NUM_THREADS="4"
#
# Or set in Python:
# import os
# import multiprocessing
#
# cpu_cores = multiprocessing.cpu_count()
# threads = max(1, cpu_cores // 2)
#
# os.environ['MKL_NUM_THREADS'] = str(threads)
# os.environ['OMP_NUM_THREADS'] = str(threads)
# os.environ['OPENBLAS_NUM_THREADS'] = str(threads)
#
# print(f"CPU optimization: {threads} threads on {cpu_cores} cores")

# =====================================
# FINAL VERIFICATION COMMAND
# =====================================
#
# After installation, run this to verify everything works:
# python -c "
# import torch, librosa, numpy as np, pandas as pd, yaml
# print('✅ All core packages imported successfully')
# print(f'PyTorch: {torch.__version__} (CPU-only: {not torch.cuda.is_available()})')
# print(f'NumPy: {np.__version__}')
# print(f'Librosa: {librosa.__version__}')
# print('🎉 Ready for CPU training!')
# "